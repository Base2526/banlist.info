<?php

/**
 * @file
 * This module holds functions useful for Drupal development.
 *
 * Please contribute!
 *
 * Devel is allowed to use its own functions kpr(), dpm() and dpq() so disable
 * the coding standard which gives warnings for using these.
 * phpcs:disable Drupal.Functions.DiscouragedFunctions
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\config_pages\Entity\ConfigPages;


use Drupal\backlist\Utils\Utils;

/**
 * Implements hook_help().
 */
function backlist_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.backlist':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Devel module provides a suite of modules containing fun for module developers and themers. For more information, see the <a href=":url">online documentation for the Devel module</a>.', [':url' => 'https://www.drupal.org/docs/8/modules/devel']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Inspecting Service Container') . '</dt>';
      $output .= '<dd>' . t('The module allows you to inspect Services and Parameters registered in the Service Container. You can see those informations on <a href=":url">Container info</a> page.', [':url' => Url::fromRoute('devel.container_info.service')->toString()]) . '</dd>';
      $output .= '<dt>' . t('Inspecting Routes') . '</dt>';
      $output .= '<dd>' . t('The module allows you to inspect routes information, gathering all routing data from <em>.routing.yml</em> files and from classes which subscribe to the route build/alter events. You can see those informations on <a href=":url">Routes info</a> page.', [':url' => Url::fromRoute('devel.route_info')->toString()]) . '</dd>';
      $output .= '<dt>' . t('Inspecting Events') . '</dt>';
      $output .= '<dd>' . t('The module allow you to inspect listeners registered in the event dispatcher. You can see those informations on <a href=":url">Events info</a> page.', [':url' => Url::fromRoute('devel.event_info')->toString()]) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_user_login() 
 */
function backlist_user_login(\Drupal\user\UserInterface $account) {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name !== 'user.reset.login') {
        $roles = $account->getRoles();
        // Do not interfere if a destination was already set.
        $current_request = \Drupal::service('request_stack')->getCurrentRequest();        
        $url =  Url::fromRoute('<front>')->toString();
        // if (in_array("media_admin", $roles)) {
        //     $user_role = 'code_approver';
        // }
        // if (in_array("media_printting", $roles)) {
        //     $user_role = 'admin_printing';
        // }
        // if (in_array("approval", $roles)) {
        //     $url =  \Drupal\Core\Url::fromRoute('quotation_approve_view.form')->toString();
        // }
        // if (in_array("supplier", $roles)) {
        //     $url =  \Drupal\Core\Url::fromRoute('production_list_view.form')->toString();
        // }
        $current_request->query->set(
            'destination',
            $url
        );
    }
}

/*
 * Implements hook_theme()
*/
function backlist_theme($existing, $type, $theme, $path) {  
  return array(
    'front-page' => array(
      'variables' => array(
        'backlists' => array(),
        'current_user_id'=> 0
      ),
    ),   
    'footer-backlist-block'=> array(
      'variables' => array(
      ),
    ),   
  );
}

/**
 * Implement hook_form_alter()
 * add js to form
 * 
 * https://www.drupal.org/forum/support/module-development-and-code-questions/2019-03-26/hook_form_alter-custom-submit-handler
 * 
*/
// array &$form, FormStateInterface $form_state
function backlist_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form['#attached']['library'][] = 'backlist/backlist_js';

  // dpm( $form_id );
  $form['revision_information']['#access'] = false;

  if($form_id == 'user_login_form'){
    // dpm($form);
    $form['actions']['forgot_password'] = [
      '#type' => 'link',
      '#title' => t('Forgot password'),
      // Example of a Url object from a route. See the documentation
      // for more methods that may help generate a Url object.
      '#url' => Url::fromRoute('user.pass'),
      '#options'=>array(
        'attributes'=>array(
            'class'=>array('button')
        ),
      ),
      '#weight' => 1000,
    ];

    // $form['s1'] = [
    //   '#type' => 'item',
    //   '#title' => t('  '),
    //   // '#markup' => t('  '),
    //   '#weight' => 1000,
    // ];

    $form['actions']['register'] = [
      '#type' => 'link',
      '#title' => t('Register'),
      // Example of a Url object from a route. See the documentation
      // for more methods that may help generate a Url object.
      '#url' => Url::fromRoute('user.register'),
      '#options'=>array(
        'attributes'=>array(
            'class'=>array('button')
        ),
      ),
      '#weight' => 1000,
    ];

    // $form['s2'] = [
    //   '#type' => 'item',
    //   '#title' => t('  '),
    //   // '#markup' => t('  '),
    //   '#weight' => 1000,
    // ];

    $banlist = ConfigPages::config('banlist');
    $allow_login_with_fb      = $banlist->get('field_allow_login_with_fb')->getValue();
    if(!empty($allow_login_with_fb)){
      if(!empty($allow_login_with_fb[0]['value'])){
        // https://www.thaicreate.com/community/php-facebook-login-api-sdk-v5.html
        $form['actions']['login_with_facebook'] = [
          '#type' => 'link',
          '#title' => t('Login with facebook'),
          // Example of a Url object from a route. See the documentation
          // for more methods that may help generate a Url object.
          '#url' => Url::fromUri(Utils::FBLogin()),
          '#options'=>array(
            'attributes'=>array(
                'class'=>array('button')
            ),
          ),
          '#weight' => 1000,
        ];
      }
    }
  }
}

function backlist_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'backlist/backlist_js';
}

// function  MODULE_user_login_foo_submit($form, &$form_state) {
//   // drupal_goto('/path/to/request.php', array('external' => TRUE));
//   $url = Url::fromRoute('<front>');
//   $form_state->setRedirectUrl($url); 
// }

/**
 * @file
 * Contains dn_students.module.
 */
 
function get_students($opt,$fname,$marks) {
  /*
	$res = array();
  if($opt == "All"){	
    $results = db_select('students', 'st')
    ->extend('\Drupal\Core\Database\Query\PagerSelectExtender')
    ->limit(15);
    $results->fields('st');
    $results->orderBy('st.id','DESC');
    $res = $results->execute()->fetchAll();
    $ret = [];
  }else{
    $results = db_select('students', 'st')
    ->extend('\Drupal\Core\Database\Query\PagerSelectExtender')
    ->limit(15);
    $results->fields('st');
    $results->orderBy('st.id','DESC');
    $results->condition('fname', $fname);
    $results->condition('marks', $marks);
    $res = $results->execute()->fetchAll();
    $ret = [];
  }
  foreach ($res as $row) {

    $delete = Url::fromUserInput('/admin/structure/dn_students/students/delete/' . $row->id, array('attributes' => array('onclick' => "return confirm('Are you Sure')")));
    $edit = Url::fromUserInput('/admin/structure/dn_students/students/edit/' . $row->id);
    $edit_link = \Drupal::l('edit', $edit);
    $delete_link = \Drupal::l('delete', $delete);

    $mainLink = t('@linkApprove  @linkReject', array('@linkApprove' => $edit_link, '@linkReject' => $delete_link));
    
    $ret[] = [
      'id' => $row->id,
      'fname' => $row->fname,
      'sname' => $row->sname,
      'age' => $row->age,
      'marks' => $row->marks,
      'opt' => $mainLink,
    ];
  }

  */

  $ret = array();
  for($i = 0; $i< 50; $i++ ){
    $ret[] = [
      'id' => '$row->id ' . $i,
      'fname' => '$row->fname ' . $i,
      'sname' => '$row->sname ' . $i,
      'age' => '$row->age ' . $i,
      'marks' => '$row->marks ' . $i,
      'opt' => '$mainLink ' . $i,
    ];
  }

  return $ret;
}

/*
 * Preview image page CSAViewsForm   
 */
function backlist_preprocess_image_widget(&$variables) {
  $element = $variables['element'];

  $variables['attributes'] = array('class' => array('image-widget', 'js-form-managed-file', 'form-managed-file', 'clearfix'));

  if (!empty($element['fids']['#value'])) {
    $file = reset($element['#files']);
    $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
    $file_variables = array(
      'style_name' => $element['#preview_image_style'],
      'uri' => $file->getFileUri(),
    );

    // Determine image dimensions.
    if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
      $file_variables['width'] = $element['#value']['width'];
      $file_variables['height'] = $element['#value']['height'];
    } else {
      $image = \Drupal::service('image.factory')->get($file->getFileUri());
      if ($image->isValid()) {
        $file_variables['width'] = $image->getWidth();
        $file_variables['height'] = $image->getHeight();
      }
      else {
        $file_variables['width'] = $file_variables['height'] = NULL;
      }
    }

    $element['preview'] = array(
      '#weight' => -10,
      '#theme' => 'image_style',
      '#width' => $file_variables['width'],
      '#height' => $file_variables['height'],
      '#style_name' => $file_variables['style_name'],
      '#uri' => $file_variables['uri'],
    );

    // Store the dimensions in the form so the file doesn't have to be
    // accessed again. This is important for remote files.
    $element['width'] = array(
      '#type' => 'hidden',
      '#value' => $file_variables['width'],
    );
    $element['height'] = array(
      '#type' => 'hidden',
      '#value' => $file_variables['height'],
    );
  }

  $variables['data'] = array();
  foreach (\Drupal\Core\Render\Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }
}


/**
* Implements hook_form_FORM_ID_alter().
*
* Disable the required 'Alternative text' field in the CKEditor's image dialog.
*/
function backlist_form_editor_image_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['attributes']['alt']['#required'] = FALSE;
}