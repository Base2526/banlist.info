version: "3"
services:
  d9:
    build: '.'
    container_name: "d9"
    # command: cron
    # command: sh -c "cron"
    ports:
      - 80:80
      - 443:443
    environment:
      - DB_HOST=postgres
      # - DB_HOST=139.59.235.247
      - DB_NAME=banlist
      - DB_USER_NAME=postgres
      - DB_PASSWORD=postgres
    deploy:
        resources:
            limits:
              cpus: '0.50'
              memory: '512M'
            reservations:
              cpus: '0.25'
              memory: '128M'
    volumes:
      # /opt/drupal/web/core/themes/bartik/templates/
      # /opt/drupal/web/core/themes/bartik/templates/classy/field
      - ./modules:/opt/drupal/web/sites/default/modules
      - ./libraries:/opt/drupal/web/sites/default/libraries
      - ./themes:/opt/drupal/web/themes
      - ./settings.php:/opt/drupal/web/sites/default/settings.php
      - ./services.yml:/opt/drupal/web/sites/default/services.yml
      - ./settings.local.php:/opt/drupal/web/sites/settings.local.php
    #   - ./drupal8/modules:/var/www/html/sites/default/modules
    #   - ./drupal8/themes:/var/www/html/sites/default/themes
    #   - ./drupal8/info.php:/var/www/html/info.php
    #   - ./drupal8/composer.json:/var/www/html/composer.json
    #   # - ./drupal8/composer.lock:/var/www/html/composer.lock
    #   # - ./drupal8/drupal-nodejs:/var/www/html/drupal-nodejs
    #   - ./drupal8/settings.php:/var/www/html/sites/default/settings.php
    #   # - ./drupal8/vendor:/var/www/html/vendor
    #   # - ./drupal8/share:/var/www/html/share
      - ./php.ini:/usr/local/etc/php/php.ini
      - ./info.php:/opt/drupal/web/info.php
      - ./vendor:/opt/drupal/vendor
      - ./composer.json:/opt/drupal/composer.json
      - ./composer.lock:/opt/drupal/composer.lock

      # Local
      - ./files:/opt/drupal/web/sites/default/files

      # Cloud
      # - /mnt/volume_sgp1_09/banlist.info/files:/opt/drupal/web/sites/default/files

      # SSL
      # - ./000-default.conf:/etc/apache2/sites-available/000-default.conf
      # - ./.well-known/acme-challenge:/opt/drupal/.well-known/acme-challenge
      - ./etc/letsencrypt/live/banlist.info:/etc/letsencrypt/live/banlist.info
      - ./letsencrypt.conf:/etc/apache2/conf-available/letsencrypt.conf
      - ./ssl-params.conf:/etc/apache2/conf-available/ssl-params.conf


      # google
      - ./google4a78161938c3c95a.html:/opt/drupal/web/google4a78161938c3c95a.html

    # custom theme
    # - ./web/core/themes/bartik/templates/node--back-list.html.twig:/opt/drupal/web/core/themes/bartik/templates/node--back-list.html.twig
    # - ./web/core/themes/bartik/templates/classy/field/field--node--field-images--back-list.html.twig:/opt/drupal/web/core/themes/bartik/templates/classy/field/field--node--field-images--back-list.html.twig
    restart: always
  # backend:
  #   build: './nodejs'
  #   container_name: "backend"
  #   ports:
  #     - "3000:3000"
  #     - "3001:3001"
  #     - "9229:9229"
  #   command:
  #     - node
  #     - "--inspect-brk=0.0.0.0"
  #     - "." 
  #   volumes:
  #     - ./nodejs:/usr/src/app
  postgres:
    image: postgres:10
    container_name: pg_banlist
    volumes: 
      - ./:/home
    #   - ./postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_DB: banlist
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: always
  pgadmin:
    image: dpage/pgadmin4:3.6
    container_name: pgadmin_banlist
    ports:
      - 7777:80
    volumes:
      - ./pgadmin:/var/lib/pgadmin/storage
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres
      PGADMIN_DEFAULT_PASSWORD: postgres
    hostname: pgadmin4
    restart: always

  # mongo1:
  #   hostname: mongo1
  #   container_name: localmongo1
  #   image: mongo:4.0-xenial
  #   expose:
  #     - 27017
  #   volumes:
  #     - ./mongodb/mongo1:/data/db
  #   restart: always
  #   entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
  # mongo2:
  #   hostname: mongo2
  #   container_name: localmongo2
  #   image: mongo:4.0-xenial
  #   expose:
  #     - 27017
  #   volumes:
  #     - ./mongodb/mongo2:/data/db
  #   restart: always
  #   entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
  # mongo3:
  #   hostname: mongo3
  #   container_name: localmongo3
  #   image: mongo:4.0-xenial
  #   expose:
  #     - 27017
  #   volumes:
  #     - ./mongodb/mongo3:/data/db
  #   restart: always
  #   entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 9999:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_SERVER: localmongo1  # กรณีเรา set replset เราต้องกำหนด  ME_CONFIG_MONGODB_SERVER ด้วย
  # wmcached:
  #   image: wodby/memcached:1.4-2.0.0

  # cron:
  #   build: './cron'
  #   container_name: "cron"
  #   volumes:
  #     - ./cron/var/log/cron.log:/var/log/cron.log
  #     - ./cron/var/log/wget.log:/opt/wget.log
  #   restart: always
  
  # redis:
  #   image: redis
  #   container_name: redis
  #   volumes:
  #     - ./redis.conf:/usr/local/etc/redis/redis.conf
  #     #- /mnt/volume_sgp1_09/banlist.info/redis/data:/data
  #   ports:
  #     - 6379:6379
  #   entrypoint: redis-server --appendonly yes
  #   restart: always

  # Redis Master
  master:
    image: redis:5-alpine
    volumes:
      - ./redis/data:/data
      # - /mnt/volume_sgp1_09/banlist.info/redis/data:/data
  
  # Redis Slave
  slave:
    image: redis:5-alpine
    command: redis-server --slaveof redis-master 6379
    links:
      - master:redis-master

#   redis-cluster:
#     image: redis:latest
#     command: redis-cli -p 7001 --cluster create 10.0.0.11:7001 10.0.0.12:7002 10.0.0.13:7003 10.0.0.14:7004 10.0.0.15:7005 10.0.0.16:7006 --cluster-replicas 1 --cluster-yes
#     depends_on:
#       - redis-1
#       - redis-2
#       - redis-3
#       - redis-4
#       - redis-5
#       - redis-6
#     networks:
#       redisnet:
#         ipv4_address: 10.0.0.2

#   redis-1:
#     build: ./redis
#     image: redis-cluster-node
#     environment:
#       X_REDIS_PORT: 7001
#     networks:
#       redisnet:
#         ipv4_address: 10.0.0.11
#     ports:
#       - 7001:6379

#   redis-2:
#     image: redis-cluster-node
#     environment:
#       X_REDIS_PORT: 7002
#     networks:
#       redisnet:
#         ipv4_address: 10.0.0.12
#     ports:
#       - 7002:6379

#   redis-3:
#     image: redis-cluster-node
#     environment:
#       X_REDIS_PORT: 7003
#     networks:
#       redisnet:
#         ipv4_address: 10.0.0.13
#     ports:
#       - 7003:6379

#   redis-4:
#     image: redis-cluster-node
#     environment:
#       X_REDIS_PORT: 7004
#     networks:
#       redisnet:
#         ipv4_address: 10.0.0.14
#     ports:
#       - 7004:6379

#   redis-5:
#     image: redis-cluster-node
#     environment:
#       X_REDIS_PORT: 7005
#     networks:
#       redisnet:
#         ipv4_address: 10.0.0.15
#     ports:
#       - 7005:6379

#   redis-6:
#     image: redis-cluster-node
#     environment:
#       X_REDIS_PORT: 7006
#     networks:
#       redisnet:
#         ipv4_address: 10.0.0.16
#     ports:
#       - 7006:6379

# networks:
#   redisnet:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 10.0.0.0/16

  

  # elasticsearch:
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
  #   container_name: elasticsearch
  #   environment:
  #     - node.name=elasticsearch
  #     - cluster.name=es-docker-cluster
  #     - discovery.seed_hosts=elasticsearch
  #     - cluster.initial_master_nodes=elasticsearch
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - ./es_data:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200

  # https://github.com/Base2526/cfu
  # frontend:
  #   container_name: cfy_frontend
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   image: aneeshmelkot/cfy_frontend
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #   ports:
  #     - "80:3000"
  #   volumes:
  #     - ./frontend:/usr/src/app
  #     - /usr/src/app/node_modules # เพิ่มความเร็วในการ load page /usr/src/app < จากด้านบน แล้วตามด้วย node_modules 
  #   restart: always
    
# docker run --name d8 -d -p 8080:80 drupal:8.6.17
# docker run --name pg -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -d -p 5432:5432 postgres:10
# docker run --name pgadmin -e PGADMIN_DEFAULT_EMAIL=root -e PGADMIN_DEFAULT_PASSWORD=root -v pgadmin:/var/lib/pgadmin/storage -d -p 7777:80 dpage/pgadmin4:3.3

# Build & Run docker
# docker build --no-cache -t {ชือ} .
# docker run --name d8  -d -p 8080:80 d8:beta-1.0

# https://medium.com/better-programming/connect-from-local-machine-to-postgresql-docker-container-f785f00461a7
# portgres เราจำเป็นต้อง exec เข้าไปสร้าง database ก่อนโดย docker exec -it {name pg} bash
# 1. psql -U postgres
# 2. CREATE DATABASE {ชือ db};

# กรณีเราไม่สามารถใช้ pgadmin connect portgres ได้เราต้อง sudo docker inspect {ชือของ postgres} จะได้ ip เพือใช้สำหรับ connect postgras ได้